#lang sicp

(define (make-interval a b)
  (if (> a b) (cons b a) (cons a b)))
(define (lower-bound x) (car x))
(define (upper-bound x) (cdr x))

(define (span-zero? x)
  (and (<= (lower-bound x) 0) (>= (upper-bound x) 0)))
(define (lt-zero? x)
  (< (upper-bound x) 0))
(define (gt-zero? x)
  (> (lower-bound x) 0))

(define (mul-interval x y)
  (cond ((lt-zero? x)
         (cond ((lt-zero? y)
                 (make-interval (* (upper-bound x) (upper-bound y))
                                (* (lower-bound x) (lower-bound y))))
               ((span-zero? y)
                 (make-interval (* (lower-bound x) (upper-bound y))
                                (* (lower-bound x) (lower-bound y))))
               ((gt-zero? y)
                 (make-interval (* (lower-bound x) (upper-bound y))
                                (* (upper-bound x) (lower-bound y))))))
        ((span-zero? x)
         (cond ((lt-zero? y)
                 (make-interval (* (upper-bound x) (lower-bound y))
                                (* (lower-bound x) (lower-bound y))))
               ((span-zero? y)
                 (let ((p1 (* (lower-bound x) (upper-bound y)))
                       (p2 (* (upper-bound x) (lower-bound y)))
                       (p3 (* (lower-bound x) (lower-bound y)))
                       (p4 (* (upper-bound x) (upper-bound y))))
                       (make-interval (min p1 p2) (max p3 p4))))
               ((gt-zero? y)
                 (make-interval (* (lower-bound x) (upper-bound y))
                                (* (upper-bound x) (upper-bound y))))))
        ((gt-zero? x)
         (cond ((lt-zero? y)
                 (make-interval (* (upper-bound x) (lower-bound y))
                                (* (lower-bound x) (lower-bound y))))
               ((span-zero? y)
                 (make-interval (* (upper-bound x) (lower-bound y))
                                (* (upper-bound x) (upper-bound y))))
               ((gt-zero? y)
                 (make-interval (* (lower-bound x) (lower-bound y))
                                (* (upper-bound x) (upper-bound y))))))))

(mul-interval (make-interval 1 2) (make-interval 3 4))
(mul-interval (make-interval -1 2) (make-interval 3 -4))