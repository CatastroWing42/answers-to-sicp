#lang sicp

(define (equ? x y) (apply-generic 'equ? x y))

(define (install-equ?-package)
  (define (equ?-scheme-number-rational x r)
    (= x (/ (numer r) (denom r))))
  (define (equ?-complex-rectangular z1 z2)
    (and (= (real-part z1) (real-part z2))
         (= (imag-part z1) (imag-part z2))))
  (define (equ?-complex-polar z1 z2)
    (and (= (magnitude z1) (magnitude z2))
         (= (angle z1) (angle z2))))
  (put 'equ? '(scheme-number scheme-number) (lambda (x y) (= x y)))
  (put 'equ? '(rational rational)
    (lambda (x y)
      (and (= (numer x) (numer y))
           (= (denom x) (denom y)))))
  (put 'equ? '(scheme-number rational)
    (lambda (x r) (equ?-scheme-number-rational x r)))
  (put 'equ? '(rational scheme-number)
    (lambda (r x) (equ?-scheme-number-rational x r)))
  (put 'equ? '(complex complex)
    (lambda (z1 z2)
      (apply-generic 'equ? z1 z2)))
  (put 'equ? '(rectangular rectangular) equ?-complex-rectangular)
  (put 'equ? '(rectangular polar) equ?-complex-rectangular)
  (put 'equ? '(polar rectangular) equ?-complex-polar)
  (put 'equ? '(polar polar) equ?-complex-polar)
  'done)
