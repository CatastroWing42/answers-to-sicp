#lang sicp

(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (drop (apply proc (map contents args)))
          (if (= (length args) 2)
              (let ((type1 (car type-tags))
                    (type2 (cadr type-tags))
                    (a1 (car args))
                    (a2 (cadr args)))
                (if (higher-type? type1 type2)
                    (apply-generic op a1 (raise-one-level a2))
                    (apply-generic op (raise-one-level a1) a2)))
              (error "No method for these types" (list op type-tags)))))))

(define (install-sparse-termlist-package)
  (define (adjoin-term term term-list)
    (if (=zero? (coeff term))
        term-list
        (cons term term-list)))
  (define (the-empty-termlist) '())
  (define (first-term term-list) (car term-list))
  (define (rest-terms term-list) (cdr term-list))
  (define (empty-termlist? term-list) (null? term-list))
  (define (make-term order coeff) (list order coeff))
  (define (order term) (car term))
  (define (coeff term) (cadr term))
  ;;interface to users
  (define (tag-term term) (attach-tag 'sparse-term term))
  (define (tag-termlist term-list) (attach-tag 'sparse-termlist term-list))
  (put 'adjoin-term '(sparse-term sparse-termlist)
    (lambda (term term-list) (tag-termlist (adjoin-term term term-list))))
  (put 'the-empty-termlist 'sparse-termlist
    (lambda () (tag-termlist (the-empty-termlist))))
  (put 'first-term '(sparse-termlist)
    (lambda (term-list) (tag-term (first-term term-list))))
  (put 'rest-terms '(sparse-termlist)
    (lambda (term-list) (tag-termlist (rest-terms term-list))))
  (put 'empty-termlist? '(sparse-termlist) empty-termlist?)
  (put 'make-term-sparse '(scheme-number scheme-number)
    (lambda (order coeff) (tag-term (make-term order coeff))))
  (put 'order '(sparse-term) order)
  (put 'coeff '(sparse-term) coeff)
  'done)

(define (install-dense-termlist-package)
  (define (adjoin-term term term-list)
    (cond ((=zero? (coeff term)) term-list)
          ((= (order term) (order (first-term term-list)))
            term-list)
          (else (cons (coeff term)
                      (adjoin-term (rest-terms term) term-list)))))
  (define (the-empty-termlist) '())
  (define (first-term term-list) term-list)
  (define (rest-terms term-list) (cdr term-list))
  (define (empty-termlist? term-list) (null? term-list))
  (define (make-term order coeff)
    (if (= order 0)
        (list coeff)
        (cons coeff (make-term (- order 1) 0))))
  (define (order term) (- (length term) 1))
  (define (coeff term) (car term))
  ;;interface to users
  (define (tag-term term) (attach-tag 'dense-term term))
  (define (tag-termlist term-list) (attach-tag 'dense-termlist term-list))
  (put 'adjoin-term '(dense-term dense-termlist)
    (lambda (term term-list) (tag-termlist (adjoin-term term term-list))))
  (put 'the-empty-termlist 'dense-termlist
    (lambda () (tag-termlist (the-empty-termlist))))
  (put 'first-term '(dense-termlist)
    (lambda (term-list) (tag-term (first-term term-list))))
  (put 'rest-terms '(dense-termlist)
    (lambda (term-list) (tag-termlist (rest-terms term-list))))
  (put 'empty-termlist? '(dense-termlist) empty-termlist?)
  (put 'make-term-dense '(scheme-number scheme-number)
    (lambda (order coeff) (tag-term (make-term order coeff))))
  (put 'order '(dense-term) order)
  (put 'coeff '(dense-term) coeff)
  'done)


(define (adjoin-term term term-list)
  (apply-generic 'adjoin-term term term-list))
(define (the-empty-termlist-sparse)
  (apply-generic 'the-empty-termlist 'sparse-termlist))
(define (the-empty-termlist-dense)
  (apply-generic 'the-empty-termlist 'dense-termlist))
(define (first-term term-list)
  (apply-generic 'first-term term-list))
(define (rest-terms term-list)
  (apply-generic 'rest-terms term-list))
(define (empty-termlist? term-list)
  (apply-generic 'empty-termlist? term-list))
(define (make-term-sparse order coeff)
  (apply-generic 'make-term-sparse order coeff))
(define (make-term-dense order coeff)
  (apply-generic 'make-term-dense order coeff))
(define (order term)
  (apply-generic 'order term))
(define (coeff term)
  (apply-generic 'coeff term))